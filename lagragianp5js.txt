let squareVertices = [];
let circleVertices = [];
let circleDiameterSlider;
let circleArea = 0;
let table; // To store the CSV data
let squareSize = 200;  // Fixed square size
let squareCenter;
let circleCenter;

function setup() {
  createCanvas(600, 600);

  // Create a slider to control the diameter of the inscribed circle
  circleDiameterSlider = createSlider(50, squareSize, squareSize, 1);  // Min size: 50, Max size: squareSize, Default: squareSize
  circleDiameterSlider.position(20, height - 40);
  
  // Fixed square size and center
  squareCenter = createVector(300, 300);
  circleCenter = squareCenter;

  // Create a button to save CSV
  let saveButton = createButton('Save CSV');
  saveButton.position(200, height - 40);
  saveButton.mousePressed(saveCSV);
  
  // Draw the initial shapes
  updateShapes();
}

function draw() {
  background(255);

  // Get the current diameter of the circle from the slider
  let circleDiameter = circleDiameterSlider.value();

  // Update the shapes based on the current circle diameter
  updateShapes(circleDiameter);

  // Draw the square (fixed size)
  fill(200, 200, 255, 100);
  stroke(0);
  beginShape();
  for (let v of squareVertices) {
    vertex(v.x, v.y);
  }
  endShape(CLOSE);
  
  // Draw the inscribed circle (adjustable diameter)
  fill(255, 0, 0, 150);
  stroke(0);
  beginShape();
  for (let v of circleVertices) {
    vertex(v.x, v.y);
  }
  endShape(CLOSE);
  
  // Display the circle's area
  textSize(16);
  fill(0);
  text('Inscribed Circle Area: ' + circleArea.toFixed(2), 20, height - 80);
  text('Circle Diameter: ' + circleDiameter, 20, height - 60);
}

// Function to update the square and circle based on current circle diameter
function updateShapes(circleDiameter) {
  squareVertices = [];
  circleVertices = [];

  // Calculate the square's four vertices (fixed square)
  squareVertices.push(createVector(squareCenter.x - squareSize / 2, squareCenter.y - squareSize / 2)); // top-left
  squareVertices.push(createVector(squareCenter.x + squareSize / 2, squareCenter.y - squareSize / 2)); // top-right
  squareVertices.push(createVector(squareCenter.x + squareSize / 2, squareCenter.y + squareSize / 2)); // bottom-right
  squareVertices.push(createVector(squareCenter.x - squareSize / 2, squareCenter.y + squareSize / 2)); // bottom-left
  
  // Calculate the inscribed circle's points based on the adjustable diameter
  let circleRadius = circleDiameter / 2;
  let pointsCount = 100;

  for (let i = 0; i < pointsCount; i++) {
    let angle = map(i, 0, pointsCount, 0, TWO_PI);
    let x = circleCenter.x + circleRadius * cos(angle);
    let y = circleCenter.y + circleRadius * sin(angle);
    circleVertices.push(createVector(x, y));
  }

  // Calculate the area of the inscribed circle
  circleArea = Math.PI * Math.pow(circleRadius, 2);
}

// Function to save CSV
function saveCSV() {
  // Create the table to store square and circle coordinates
  table = new p5.Table();

  // Add columns for square and circle points
  table.addColumn('square_x');
  table.addColumn('square_y');
  table.addColumn('circle_x');
  table.addColumn('circle_y');

  // Add rows for square and circle coordinates
  for (let i = 0; i < squareVertices.length; i++) {
    let row = table.addRow();
    row.setNum('square_x', squareVertices[i].x);
    row.setNum('square_y', squareVertices[i].y);
    if (i < circleVertices.length) {
      row.setNum('circle_x', circleVertices[i].x);
      row.setNum('circle_y', circleVertices[i].y);
    }
  }

  // Save the table as a CSV file
  saveTable(table, 'square_and_circle_coords.csv');
  
  // Inform the user that the CSV has been saved
  textSize(16);
  fill(0);
  text('CSV file with square and circle coordinates has been saved!', 20, height - 100);
}
