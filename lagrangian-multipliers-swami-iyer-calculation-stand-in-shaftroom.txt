let squareVertices = [];
let polygonVertices = [];
let previousPolygonVertices = [];
let draggingVertex = -1;
let polygonDiameterSlider, sidesSlider, scaleSlider;
let polygonArea = 0;
let squareWidth = 200;
let squareHeight = 200;
let squareCenter;
let squareWidthInput, squareHeightInput;

function setup() {
  createCanvas(800, 800);

  // Input boxes for square dimensions
  createDiv("Square Width:").position(20, height - 100);
  squareWidthInput = createInput(squareWidth.toString());
  squareWidthInput.position(120, height - 100);
  squareWidthInput.input(updateSquareDimensions);

  createDiv("Square Height:").position(20, height - 80);
  squareHeightInput = createInput(squareHeight.toString());
  squareHeightInput.position(120, height - 80);
  squareHeightInput.input(updateSquareDimensions);

  // Sliders for controlling the polygon
  createDiv("Number of Sides:").position(20, height - 60);
  sidesSlider = createSlider(3, 100, 6, 1);
  sidesSlider.position(120, height - 60);
  sidesSlider.input(updateShapes);

  createDiv("Scale Factor:").position(20, height - 40);
  scaleSlider = createSlider(0.5, 2, 1, 0.01);
  scaleSlider.position(120, height - 40);
  scaleSlider.input(scalePolygon);

  // Button to save CSV
  let saveButton = createButton("Save CSV");
  saveButton.position(300, height - 60);
  saveButton.mousePressed(saveCSV);

  squareCenter = createVector(width / 2, height / 2);
  updateShapes();
}

function draw() {
  background(255);

  // Draw the outer square
  fill(200, 200, 255, 100);
  stroke(0);
  beginShape();
  for (let v of squareVertices) {
    vertex(v.x, v.y);
  }
  endShape(CLOSE);

  // Draw the inner polygon
  fill(255, 0, 0, 150);
  stroke(0);
  beginShape();
  for (let v of polygonVertices) {
    vertex(v.x, v.y);
  }
  endShape(CLOSE);

  // Draw red points for polygon vertices
  fill(255, 0, 0);
  noStroke();
  for (let v of polygonVertices) {
    ellipse(v.x, v.y, 10, 10);
  }

  // Display information on canvas
  fill(0);
  textSize(16);
  text(`Inner Polygon Area: ${polygonArea.toFixed(2)} units²`, 20, height - 140);
  text(`Outer Square Area: ${(squareWidth * squareHeight).toFixed(2)} units²`, 20, height - 120);
  text(`Scale Factor: ${scaleSlider.value().toFixed(2)}`, 20, height - 20);

  // Display coordinate table
  displayCoordinateTable();
}

function updateShapes() {
  polygonVertices = [];
  previousPolygonVertices = [];
  squareVertices = [
    createVector(squareCenter.x - squareWidth / 2, squareCenter.y - squareHeight / 2),
    createVector(squareCenter.x + squareWidth / 2, squareCenter.y - squareHeight / 2),
    createVector(squareCenter.x + squareWidth / 2, squareCenter.y + squareHeight / 2),
    createVector(squareCenter.x - squareWidth / 2, squareCenter.y + squareHeight / 2)
  ];

  let numSides = sidesSlider.value();
  let radius = Math.min(squareWidth, squareHeight) / 2 * 0.8;
  for (let i = 0; i < numSides; i++) {
    let angle = map(i, 0, numSides, 0, TWO_PI);
    let x = squareCenter.x + radius * cos(angle);
    let y = squareCenter.y + radius * sin(angle);
    polygonVertices.push(createVector(x, y));
    previousPolygonVertices.push(createVector(x, y));
  }
  calculatePolygonArea();
}

function updateSquareDimensions() {
  squareWidth = parseFloat(squareWidthInput.value()) || squareWidth;
  squareHeight = parseFloat(squareHeightInput.value()) || squareHeight;
  updateShapes();
}

function calculatePolygonArea() {
  polygonArea = 0;
  let n = polygonVertices.length;
  for (let i = 0; i < n; i++) {
    let current = polygonVertices[i];
    let next = polygonVertices[(i + 1) % n];
    polygonArea += current.x * next.y - current.y * next.x;
  }
  polygonArea = abs(polygonArea) / 2;
}

function mousePressed() {
  for (let i = 0; i < polygonVertices.length; i++) {
    if (dist(mouseX, mouseY, polygonVertices[i].x, polygonVertices[i].y) < 10) {
      draggingVertex = i;
      break;
    }
  }
}

function mouseDragged() {
  if (draggingVertex !== -1) {
    polygonVertices[draggingVertex].x = constrain(mouseX, squareVertices[0].x, squareVertices[2].x);
    polygonVertices[draggingVertex].y = constrain(mouseY, squareVertices[0].y, squareVertices[2].y);
    calculatePolygonArea();
  }
}

function mouseReleased() {
  if (draggingVertex !== -1) {
    previousPolygonVertices[draggingVertex] = polygonVertices[draggingVertex].copy();
    draggingVertex = -1;
  }
}

function scalePolygon() {
  let scaleFactor = scaleSlider.value();
  for (let i = 0; i < polygonVertices.length; i++) {
    polygonVertices[i].x = squareCenter.x + (previousPolygonVertices[i].x - squareCenter.x) * scaleFactor;
    polygonVertices[i].y = squareCenter.y + (previousPolygonVertices[i].y - squareCenter.y) * scaleFactor;
  }
  calculatePolygonArea();
}

function saveCSV() {
  let rows = [];
  rows.push(["Vertex", "Previous X", "Previous Y", "Current X", "Current Y"]);

  for (let i = 0; i < polygonVertices.length; i++) {
    rows.push([
      `Vertex ${i + 1}`,
      previousPolygonVertices[i].x.toFixed(2),
      previousPolygonVertices[i].y.toFixed(2),
      polygonVertices[i].x.toFixed(2),
      polygonVertices[i].y.toFixed(2),
    ]);
  }

  let csvContent = rows.map(row => row.join(",")).join("\n");
  saveStrings([csvContent], "polygon_coordinates.csv");
}

function displayCoordinateTable() {
  let xOffset = 450;
  let yOffset = 50;
  fill(0);
  textSize(12);
  textAlign(LEFT);

  text("Vertex | Previous X | Previous Y | Current X | Current Y", xOffset, yOffset);
  for (let i = 0; i < polygonVertices.length; i++) {
    text(
      `V${i + 1}   | ${previousPolygonVertices[i].x.toFixed(2)} | ${previousPolygonVertices[i].y.toFixed(2)} | ${polygonVertices[i].x.toFixed(2)} | ${polygonVertices[i].y.toFixed(2)}`,
      xOffset,
      yOffset + 20 * (i + 1)
    );
  }
}
