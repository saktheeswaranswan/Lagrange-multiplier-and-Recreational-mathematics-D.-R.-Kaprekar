let squareVertices = [];
let polygonVertices = [];
let draggingVertex = -1;
let polygonDiameterSlider;
let sidesSlider;
let scaleSlider;
let polygonArea = 0;
let squareSize = 200;
let squareCenter;

function setup() {
  createCanvas(600, 600);

  // Sliders for controlling the polygon
  polygonDiameterSlider = createSlider(50, squareSize, squareSize, 1);
  polygonDiameterSlider.position(20, height - 60);

  sidesSlider = createSlider(3, 100, 6, 1);
  sidesSlider.position(20, height - 40);

  scaleSlider = createSlider(0.5, 2, 1, 0.01);
  scaleSlider.position(20, height - 20);

  squareCenter = createVector(300, 300);
  updateShapes();
}

function draw() {
  background(255);

  let polygonDiameter = polygonDiameterSlider.value();
  let numSides = sidesSlider.value();

  // Update shapes if the number of sides changes
  if (polygonVertices.length !== numSides) {
    updateShapes(polygonDiameter, numSides);
  }

  let scaleFactor = scaleSlider.value();
  scalePolygon(scaleFactor);

  // Draw the square
  fill(200, 200, 255, 100);
  stroke(0);
  beginShape();
  for (let v of squareVertices) {
    vertex(v.x, v.y);
  }
  endShape(CLOSE);

  // Draw the polygon
  fill(255, 0, 0, 150);
  stroke(0);
  beginShape();
  for (let v of polygonVertices) {
    vertex(v.x, v.y);
  }
  endShape(CLOSE);

  // Display information
  textSize(16);
  fill(0);
  text(`Polygon Area: ${polygonArea.toFixed(2)} mmÂ²`, 20, height - 120);
  text(`Polygon Diameter: ${polygonDiameter} mm`, 20, height - 100);
  text(`Number of Sides: ${numSides}`, 20, height - 80);
  text(`Scale Factor: ${scaleFactor.toFixed(2)}`, 20, height - 60);
}

function updateShapes(polygonDiameter = squareSize, numSides = 6) {
  squareVertices = [];
  polygonVertices = [];

  // Square vertices
  squareVertices.push(createVector(squareCenter.x - squareSize / 2, squareCenter.y - squareSize / 2));
  squareVertices.push(createVector(squareCenter.x + squareSize / 2, squareCenter.y - squareSize / 2));
  squareVertices.push(createVector(squareCenter.x + squareSize / 2, squareCenter.y + squareSize / 2));
  squareVertices.push(createVector(squareCenter.x - squareSize / 2, squareCenter.y + squareSize / 2));

  // Polygon vertices
  let radius = polygonDiameter / 2;
  for (let i = 0; i < numSides; i++) {
    let angle = map(i, 0, numSides, 0, TWO_PI);
    let x = squareCenter.x + radius * cos(angle);
    let y = squareCenter.y + radius * sin(angle);
    polygonVertices.push(createVector(x, y));
  }

  calculatePolygonArea();
}

function calculatePolygonArea() {
  polygonArea = 0;
  let n = polygonVertices.length;
  for (let i = 0; i < n; i++) {
    let current = polygonVertices[i];
    let next = polygonVertices[(i + 1) % n];
    polygonArea += current.x * next.y - current.y * next.x;
  }
  polygonArea = abs(polygonArea) / 2;
}

function mousePressed() {
  for (let i = 0; i < polygonVertices.length; i++) {
    if (dist(mouseX, mouseY, polygonVertices[i].x, polygonVertices[i].y) < 10) {
      draggingVertex = i;
      break;
    }
  }
}

function mouseDragged() {
  if (draggingVertex !== -1) {
    polygonVertices[draggingVertex].x = mouseX;
    polygonVertices[draggingVertex].y = mouseY;
    calculatePolygonArea();
  }
}

function mouseReleased() {
  draggingVertex = -1;
}

function scalePolygon(scaleFactor) {
  for (let v of polygonVertices) {
    v.x = squareCenter.x + (v.x - squareCenter.x) * scaleFactor;
    v.y = squareCenter.y + (v.y - squareCenter.y) * scaleFactor;
  }
  calculatePolygonArea();
}
